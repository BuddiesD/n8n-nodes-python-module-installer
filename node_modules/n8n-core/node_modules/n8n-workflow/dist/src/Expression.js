"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Expression = void 0;
const tmpl = __importStar(require("riot-tmpl"));
const luxon_1 = require("luxon");
const _1 = require(".");
tmpl.brackets.set('{{ }}');
tmpl.tmpl.errorHandler = () => { };
class Expression {
    constructor(workflow) {
        this.workflow = workflow;
    }
    convertObjectValueToString(value) {
        const typeName = Array.isArray(value) ? 'Array' : 'Object';
        return `[${typeName}: ${JSON.stringify(value)}]`;
    }
    resolveSimpleParameterValue(parameterValue, siblingParameters, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, mode, timezone, additionalKeys, returnObjectAsString = false, selfData = {}) {
        if (typeof parameterValue !== 'string' || parameterValue.charAt(0) !== '=') {
            return parameterValue;
        }
        parameterValue = parameterValue.substr(1);
        const dataProxy = new _1.WorkflowDataProxy(this.workflow, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, siblingParameters, mode, timezone, additionalKeys, -1, selfData);
        const data = dataProxy.getDataProxy();
        data.process = {
            arch: process.arch,
            env: process.env,
            platform: process.platform,
            pid: process.pid,
            ppid: process.ppid,
            release: process.release,
            version: process.pid,
            versions: process.versions,
        };
        data.document = {};
        data.DateTime = luxon_1.DateTime;
        data.Interval = luxon_1.Interval;
        data.Duration = luxon_1.Duration;
        data.constructor = {};
        try {
            const returnValue = tmpl.tmpl(parameterValue, data);
            if (typeof returnValue === 'function') {
                throw new Error('Expression resolved to a function. Please add "()"');
            }
            else if (returnValue !== null && typeof returnValue === 'object') {
                if (returnObjectAsString) {
                    return this.convertObjectValueToString(returnValue);
                }
            }
            return returnValue;
        }
        catch (e) {
            throw new Error(`Expression is not valid: ${e.message}`);
        }
    }
    getSimpleParameterValue(node, parameterValue, mode, timezone, additionalKeys, defaultValue) {
        if (parameterValue === undefined) {
            return defaultValue;
        }
        const runIndex = 0;
        const itemIndex = 0;
        const connectionInputData = [];
        const runData = {
            resultData: {
                runData: {},
            },
        };
        return this.getParameterValue(parameterValue, runData, runIndex, itemIndex, node.name, connectionInputData, mode, timezone, additionalKeys);
    }
    getComplexParameterValue(node, parameterValue, mode, timezone, additionalKeys, defaultValue = undefined, selfData = {}) {
        if (parameterValue === undefined) {
            return defaultValue;
        }
        const runIndex = 0;
        const itemIndex = 0;
        const connectionInputData = [];
        const runData = {
            resultData: {
                runData: {},
            },
        };
        const returnData = this.getParameterValue(parameterValue, runData, runIndex, itemIndex, node.name, connectionInputData, mode, timezone, additionalKeys, false, selfData);
        return this.getParameterValue(returnData, runData, runIndex, itemIndex, node.name, connectionInputData, mode, timezone, additionalKeys, false, selfData);
    }
    getParameterValue(parameterValue, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, mode, timezone, additionalKeys, returnObjectAsString = false, selfData = {}) {
        const isComplexParameter = (value) => {
            return typeof value === 'object';
        };
        const resolveParameterValue = (value, siblingParameters) => {
            if (isComplexParameter(value)) {
                return this.getParameterValue(value, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, mode, timezone, additionalKeys, returnObjectAsString, selfData);
            }
            return this.resolveSimpleParameterValue(value, siblingParameters, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, mode, timezone, additionalKeys, returnObjectAsString, selfData);
        };
        if (!isComplexParameter(parameterValue)) {
            return this.resolveSimpleParameterValue(parameterValue, {}, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, mode, timezone, additionalKeys, returnObjectAsString, selfData);
        }
        if (Array.isArray(parameterValue)) {
            const returnData = [];
            for (const item of parameterValue) {
                returnData.push(resolveParameterValue(item, {}));
            }
            if (returnObjectAsString && typeof returnData === 'object') {
                return this.convertObjectValueToString(returnData);
            }
            return returnData;
        }
        if (parameterValue === null || parameterValue === undefined) {
            return parameterValue;
        }
        const returnData = {};
        for (const key of Object.keys(parameterValue)) {
            returnData[key] = resolveParameterValue(parameterValue[key], parameterValue);
        }
        if (returnObjectAsString && typeof returnData === 'object') {
            return this.convertObjectValueToString(returnData);
        }
        return returnData;
    }
}
exports.Expression = Expression;
//# sourceMappingURL=Expression.js.map