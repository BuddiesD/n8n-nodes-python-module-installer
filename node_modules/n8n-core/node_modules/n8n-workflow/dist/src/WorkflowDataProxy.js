"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowDataProxy = void 0;
const luxon_1 = require("luxon");
const jmespath = __importStar(require("jmespath"));
const _1 = require(".");
class WorkflowDataProxy {
    constructor(workflow, runExecutionData, runIndex, itemIndex, activeNodeName, connectionInputData, siblingParameters, mode, defaultTimezone, additionalKeys, defaultReturnRunIndex = -1, selfData = {}) {
        this.workflow = workflow;
        this.runExecutionData = runExecutionData;
        this.defaultReturnRunIndex = defaultReturnRunIndex;
        this.runIndex = runIndex;
        this.itemIndex = itemIndex;
        this.activeNodeName = activeNodeName;
        this.connectionInputData = connectionInputData;
        this.siblingParameters = siblingParameters;
        this.mode = mode;
        this.defaultTimezone = defaultTimezone;
        this.timezone = this.workflow.settings.timezone || this.defaultTimezone;
        this.selfData = selfData;
        this.additionalKeys = additionalKeys;
        luxon_1.Settings.defaultZone = this.timezone;
    }
    nodeContextGetter(nodeName) {
        const that = this;
        const node = this.workflow.nodes[nodeName];
        return new Proxy({}, {
            ownKeys(target) {
                if (Reflect.ownKeys(target).length === 0) {
                    Object.assign(target, _1.NodeHelpers.getContext(that.runExecutionData, 'node', node));
                }
                return Reflect.ownKeys(target);
            },
            getOwnPropertyDescriptor(k) {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            get(target, name, receiver) {
                name = name.toString();
                const contextData = _1.NodeHelpers.getContext(that.runExecutionData, 'node', node);
                if (!contextData.hasOwnProperty(name)) {
                    throw new Error(`Could not find parameter "${name}" on context of node "${nodeName}"`);
                }
                return contextData[name];
            },
        });
    }
    selfGetter() {
        const that = this;
        return new Proxy({}, {
            ownKeys(target) {
                return Reflect.ownKeys(target);
            },
            get(target, name, receiver) {
                name = name.toString();
                return that.selfData[name];
            },
        });
    }
    nodeParameterGetter(nodeName) {
        const that = this;
        const node = this.workflow.nodes[nodeName];
        return new Proxy(node.parameters, {
            ownKeys(target) {
                return Reflect.ownKeys(target);
            },
            getOwnPropertyDescriptor(k) {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            get(target, name, receiver) {
                name = name.toString();
                let returnValue;
                if (name[0] === '&') {
                    const key = name.slice(1);
                    if (!that.siblingParameters.hasOwnProperty(key)) {
                        throw new Error(`Could not find sibling parameter "${key}" on node "${nodeName}"`);
                    }
                    returnValue = that.siblingParameters[key];
                }
                else {
                    if (!node.parameters.hasOwnProperty(name)) {
                        return undefined;
                    }
                    returnValue = node.parameters[name];
                }
                if (typeof returnValue === 'string' && returnValue.charAt(0) === '=') {
                    return that.workflow.expression.getParameterValue(returnValue, that.runExecutionData, that.runIndex, that.itemIndex, that.activeNodeName, that.connectionInputData, that.mode, that.timezone, that.additionalKeys);
                }
                return returnValue;
            },
        });
    }
    getNodeExecutionData(nodeName, shortSyntax = false, outputIndex, runIndex) {
        const that = this;
        let executionData;
        if (!shortSyntax) {
            if (that.runExecutionData === null) {
                throw new Error(`Workflow did not run so do not have any execution-data.`);
            }
            if (!that.runExecutionData.resultData.runData.hasOwnProperty(nodeName)) {
                if (that.workflow.getNode(nodeName)) {
                    throw new Error(`The node "${nodeName}" hasn't been executed yet, so you can't reference its output data`);
                }
                else {
                    throw new Error(`No node called "${nodeName}" in this workflow`);
                }
            }
            runIndex = runIndex === undefined ? that.defaultReturnRunIndex : runIndex;
            runIndex =
                runIndex === -1 ? that.runExecutionData.resultData.runData[nodeName].length - 1 : runIndex;
            if (that.runExecutionData.resultData.runData[nodeName].length <= runIndex) {
                throw new Error(`Run ${runIndex} of node "${nodeName}" not found`);
            }
            const taskData = that.runExecutionData.resultData.runData[nodeName][runIndex].data;
            if (taskData.main === null || !taskData.main.length || taskData.main[0] === null) {
                throw new Error(`No data found from "main" input.`);
            }
            if (outputIndex === undefined) {
                const outputIndex = that.workflow.getNodeConnectionOutputIndex(that.activeNodeName, nodeName, 'main');
                if (outputIndex === undefined) {
                    throw new Error(`The node "${that.activeNodeName}" is not connected with node "${nodeName}" so no data can get returned from it.`);
                }
            }
            if (outputIndex === undefined) {
                outputIndex = 0;
            }
            if (taskData.main.length <= outputIndex) {
                throw new Error(`Node "${nodeName}" has no branch with index ${outputIndex}.`);
            }
            executionData = taskData.main[outputIndex];
        }
        else {
            executionData = that.connectionInputData;
        }
        return executionData;
    }
    nodeDataGetter(nodeName, shortSyntax = false) {
        const that = this;
        const node = this.workflow.nodes[nodeName];
        if (!node) {
            return undefined;
        }
        return new Proxy({}, {
            get(target, name, receiver) {
                name = name.toString();
                if (['binary', 'data', 'json'].includes(name)) {
                    const executionData = that.getNodeExecutionData(nodeName, shortSyntax, undefined);
                    if (executionData.length <= that.itemIndex) {
                        throw new Error(`No data found for item-index: "${that.itemIndex}"`);
                    }
                    if (['data', 'json'].includes(name)) {
                        return executionData[that.itemIndex].json;
                    }
                    if (name === 'binary') {
                        const returnData = {};
                        if (!executionData[that.itemIndex].binary) {
                            return returnData;
                        }
                        const binaryKeyData = executionData[that.itemIndex].binary;
                        for (const keyName of Object.keys(binaryKeyData)) {
                            returnData[keyName] = {};
                            const binaryData = binaryKeyData[keyName];
                            for (const propertyName in binaryData) {
                                if (propertyName === 'data') {
                                    continue;
                                }
                                returnData[keyName][propertyName] = binaryData[propertyName];
                            }
                        }
                        return returnData;
                    }
                }
                else if (name === 'context') {
                    return that.nodeContextGetter(nodeName);
                }
                else if (name === 'parameter') {
                    return that.nodeParameterGetter(nodeName);
                }
                else if (name === 'runIndex') {
                    if (that.runExecutionData === null ||
                        !that.runExecutionData.resultData.runData[nodeName]) {
                        return -1;
                    }
                    return that.runExecutionData.resultData.runData[nodeName].length - 1;
                }
                return Reflect.get(target, name, receiver);
            },
        });
    }
    envGetter() {
        return new Proxy({}, {
            get(target, name, receiver) {
                return process.env[name.toString()];
            },
        });
    }
    workflowGetter() {
        const allowedValues = ['active', 'id', 'name'];
        const that = this;
        return new Proxy({}, {
            ownKeys(target) {
                return allowedValues;
            },
            getOwnPropertyDescriptor(k) {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            get(target, name, receiver) {
                if (!allowedValues.includes(name.toString())) {
                    throw new Error(`The key "${name.toString()}" is not supported!`);
                }
                return that.workflow[name.toString()];
            },
        });
    }
    nodeGetter() {
        const that = this;
        return new Proxy({}, {
            get(target, name, receiver) {
                return that.nodeDataGetter(name.toString());
            },
        });
    }
    getDataProxy() {
        const that = this;
        const getNodeOutput = (nodeName, branchIndex, runIndex) => {
            let executionData;
            if (nodeName === undefined) {
                executionData = that.connectionInputData;
            }
            else {
                branchIndex = branchIndex || 0;
                runIndex = runIndex === undefined ? -1 : runIndex;
                executionData = that.getNodeExecutionData(nodeName, false, branchIndex, runIndex);
            }
            return executionData;
        };
        const jmespathWrapper = (data, query) => {
            if (!Array.isArray(data) && typeof data === 'object') {
                return jmespath.search({ ...data }, query);
            }
            return jmespath.search(data, query);
        };
        const base = {
            $: (nodeName) => {
                if (!nodeName) {
                    throw new Error(`When calling $(), please specify a node`);
                }
                return new Proxy({}, {
                    get(target, property, receiver) {
                        var _a;
                        if (property === 'pairedItem') {
                            return () => {
                                const executionData = getNodeOutput(nodeName, 0, that.runIndex);
                                if (executionData[that.itemIndex]) {
                                    return executionData[that.itemIndex];
                                }
                                return undefined;
                            };
                        }
                        if (property === 'item') {
                            return (itemIndex, branchIndex, runIndex) => {
                                if (itemIndex === undefined) {
                                    itemIndex = that.itemIndex;
                                    branchIndex = 0;
                                    runIndex = that.runIndex;
                                }
                                const executionData = getNodeOutput(nodeName, branchIndex, runIndex);
                                if (executionData[itemIndex]) {
                                    return executionData[itemIndex];
                                }
                                let errorMessage = '';
                                if (branchIndex === undefined && runIndex === undefined) {
                                    errorMessage = `
											No item found at index ${itemIndex}
											(for node "${nodeName}")`;
                                    throw new Error(errorMessage);
                                }
                                if (branchIndex === undefined) {
                                    errorMessage = `
											No item found at index ${itemIndex}
											in run ${runIndex || that.runIndex}
											(for node "${nodeName}")`;
                                    throw new Error(errorMessage);
                                }
                                if (runIndex === undefined) {
                                    errorMessage = `
											No item found at index ${itemIndex}
											of branch ${branchIndex || 0}
											(for node "${nodeName}")`;
                                    throw new Error(errorMessage);
                                }
                                errorMessage = `
										No item found at index ${itemIndex}
										of branch ${branchIndex || 0}
										in run ${runIndex || that.runIndex}
										(for node "${nodeName}")`;
                                throw new Error(errorMessage);
                            };
                        }
                        if (property === 'first') {
                            return (branchIndex, runIndex) => {
                                const executionData = getNodeOutput(nodeName, branchIndex, runIndex);
                                if (executionData[0])
                                    return executionData[0];
                                return undefined;
                            };
                        }
                        if (property === 'last') {
                            return (branchIndex, runIndex) => {
                                const executionData = getNodeOutput(nodeName, branchIndex, runIndex);
                                if (!executionData.length)
                                    return undefined;
                                if (executionData[executionData.length - 1]) {
                                    return executionData[executionData.length - 1];
                                }
                                return undefined;
                            };
                        }
                        if (property === 'all') {
                            return (branchIndex, runIndex) => getNodeOutput(nodeName, branchIndex, runIndex);
                        }
                        if (property === 'context') {
                            return that.nodeContextGetter(nodeName);
                        }
                        if (property === 'params') {
                            return (_a = that.workflow.getNode(nodeName)) === null || _a === void 0 ? void 0 : _a.parameters;
                        }
                        return Reflect.get(target, property, receiver);
                    },
                });
            },
            $input: new Proxy({}, {
                get(target, property, receiver) {
                    if (property === 'thisItem') {
                        return that.connectionInputData[that.itemIndex];
                    }
                    if (property === 'item') {
                        return (itemIndex) => {
                            if (itemIndex === undefined)
                                itemIndex = that.itemIndex;
                            const result = that.connectionInputData;
                            if (result[itemIndex]) {
                                return result[itemIndex];
                            }
                            return undefined;
                        };
                    }
                    if (property === 'first') {
                        return () => {
                            const result = that.connectionInputData;
                            if (result[0]) {
                                return result[0];
                            }
                            return undefined;
                        };
                    }
                    if (property === 'last') {
                        return () => {
                            const result = that.connectionInputData;
                            if (result.length && result[result.length - 1]) {
                                return result[result.length - 1];
                            }
                            return undefined;
                        };
                    }
                    if (property === 'all') {
                        return () => {
                            const result = that.connectionInputData;
                            if (result.length) {
                                return result;
                            }
                            return [];
                        };
                    }
                    return Reflect.get(target, property, receiver);
                },
            }),
            $thisItem: that.connectionInputData[that.itemIndex],
            $binary: {},
            $data: {},
            $env: this.envGetter(),
            $evaluateExpression: (expression, itemIndex) => {
                itemIndex = itemIndex || that.itemIndex;
                return that.workflow.expression.getParameterValue(`=${expression}`, that.runExecutionData, that.runIndex, itemIndex, that.activeNodeName, that.connectionInputData, that.mode, that.timezone, that.additionalKeys);
            },
            $item: (itemIndex, runIndex) => {
                const defaultReturnRunIndex = runIndex === undefined ? -1 : runIndex;
                const dataProxy = new WorkflowDataProxy(this.workflow, this.runExecutionData, this.runIndex, itemIndex, this.activeNodeName, this.connectionInputData, that.siblingParameters, that.mode, that.defaultTimezone, that.additionalKeys, defaultReturnRunIndex);
                return dataProxy.getDataProxy();
            },
            $items: (nodeName, outputIndex, runIndex) => {
                let executionData;
                if (nodeName === undefined) {
                    executionData = that.connectionInputData;
                }
                else {
                    outputIndex = outputIndex || 0;
                    runIndex = runIndex === undefined ? -1 : runIndex;
                    executionData = that.getNodeExecutionData(nodeName, false, outputIndex, runIndex);
                }
                return executionData;
            },
            $json: {},
            $node: this.nodeGetter(),
            $self: this.selfGetter(),
            $parameter: this.nodeParameterGetter(this.activeNodeName),
            $position: this.itemIndex,
            $runIndex: this.runIndex,
            $mode: this.mode,
            $workflow: this.workflowGetter(),
            $thisRunIndex: this.runIndex,
            $thisItemIndex: this.itemIndex,
            $now: luxon_1.DateTime.now(),
            $today: luxon_1.DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }),
            $jmespath: jmespathWrapper,
            DateTime: luxon_1.DateTime,
            Interval: luxon_1.Interval,
            Duration: luxon_1.Duration,
            ...that.additionalKeys,
        };
        return new Proxy(base, {
            get(target, name, receiver) {
                if (['$data', '$json'].includes(name)) {
                    return that.nodeDataGetter(that.activeNodeName, true).json;
                }
                if (name === '$binary') {
                    return that.nodeDataGetter(that.activeNodeName, true).binary;
                }
                return Reflect.get(target, name, receiver);
            },
        });
    }
}
exports.WorkflowDataProxy = WorkflowDataProxy;
//# sourceMappingURL=WorkflowDataProxy.js.map